# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module IniParse

  private

  def gen(&blk); end
  def open(path); end
  def parse(source); end

  def self.gen(&blk); end
  def self.open(path); end
  def self.parse(source); end
end

class IniParse::Document
  include(::Enumerable)

  def initialize(path = _); end

  def [](key); end
  def delete(*args); end
  def each(*args, &blk); end
  def has_section?(key); end
  def inspect; end
  def lines; end
  def path; end
  def path=(_); end
  def save(path = _); end
  def section(key); end
  def to_h; end
  def to_hash; end
  def to_ini; end
  def to_s; end
end

class IniParse::Generator
  def initialize(opts = _); end

  def blank; end
  def comment(comment, opts = _); end
  def context; end
  def document; end
  def gen; end
  def method_missing(name, *args, &blk); end
  def option(key, value, opts = _); end
  def section(name, opts = _); end
  def with_options(opts = _); end

  private

  def line_options(given_opts); end

  def self.gen(opts = _, &blk); end
end

class IniParse::IniParseError < ::StandardError
end

module IniParse::LineCollection
  include(::Enumerable)

  def initialize; end

  def <<(line); end
  def [](key); end
  def []=(key, value); end
  def delete(key); end
  def each(include_blank = _); end
  def has_key?(*args); end
  def keys; end
  def push(line); end
  def to_a; end
  def to_h; end
  def to_hash; end
end

class IniParse::LineNotAllowed < ::IniParse::IniParseError
end

module IniParse::Lines
end

class IniParse::Lines::AnonymousSection < ::IniParse::Lines::Section
  def initialize; end

  def to_ini; end

  private

  def line_contents; end
end

class IniParse::Lines::Blank
  include(::IniParse::Lines::Line)

  def blank?; end

  def self.parse(line, opts); end
end

class IniParse::Lines::Comment < ::IniParse::Lines::Blank
  def comment; end
  def has_comment?; end
end

module IniParse::Lines::Line
  def initialize(opts = _); end

  def blank?; end
  def comment; end
  def has_comment?; end
  def line_contents; end
  def options; end
  def to_ini; end
end

class IniParse::Lines::Option
  include(::IniParse::Lines::Line)

  def initialize(key, value, opts = _); end

  def key; end
  def key=(_); end
  def value; end
  def value=(_); end

  private

  def line_contents; end

  def self.parse(line, opts); end
  def self.typecast(value); end
end

class IniParse::Lines::Section
  include(::Enumerable)
  include(::IniParse::Lines::Line)

  def initialize(key, opts = _); end

  def [](key); end
  def []=(key, value); end
  def delete(*args); end
  def each(*args, &blk); end
  def has_option?(key); end
  def key; end
  def key=(_); end
  def lines; end
  def merge!(other); end
  def option(key); end
  def to_ini; end

  private

  def line_contents; end

  def self.parse(line, opts); end
end

class IniParse::NoSectionError < ::IniParse::ParseError
end

class IniParse::OptionCollection
  include(::IniParse::LineCollection)
  include(::Enumerable)

  def <<(line); end
  def keys; end
end

class IniParse::ParseError < ::IniParse::IniParseError
end

class IniParse::Parser
  def initialize(source); end

  def parse; end

  def self.parse_line(line); end
  def self.parse_types; end
  def self.parse_types=(types); end
end

class IniParse::SectionCollection
  include(::IniParse::LineCollection)
  include(::Enumerable)

  def <<(line); end
end

IniParse::VERSION = T.let(T.unsafe(nil), String)
