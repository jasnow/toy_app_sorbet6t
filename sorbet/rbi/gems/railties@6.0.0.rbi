# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module Rails
  extend(::ActiveSupport::Autoload)

  def self.app_class; end
  def self.app_class=(_); end
  def self.application; end
  def self.application=(_); end
  def self.autoloaders; end
  def self.backtrace_cleaner; end
  def self.cache; end
  def self.cache=(_); end
  def self.configuration; end
  def self.env; end
  def self.env=(environment); end
  def self.gem_version; end
  def self.groups(*groups); end
  def self.initialize!(*args, &block); end
  def self.initialized?(*args, &block); end
  def self.logger; end
  def self.logger=(_); end
  def self.public_path; end
  def self.root; end
  def self.version; end
end

class Rails::Application < ::Rails::Engine
  def initialize(initial_variable_values = _, &block); end

  def asset_precompiled?(logical_path); end
  def assets; end
  def assets=(_); end
  def assets_manifest; end
  def assets_manifest=(_); end
  def build_middleware_stack; end
  def config; end
  def config=(_); end
  def config_for(name, env: _); end
  def console(&blk); end
  def credentials; end
  def default_url_options(*args, &block); end
  def default_url_options=(arg); end
  def encrypted(path, key_path: _, env_key: _); end
  def env_config; end
  def executor; end
  def generators(&blk); end
  def helpers_paths; end
  def initialize!(group = _); end
  def initialized?; end
  def initializer(name, opts = _, &block); end
  def initializers; end
  def isolate_namespace(mod); end
  def key_generator; end
  def message_verifier(verifier_name); end
  def migration_railties; end
  def precompiled_assets(clear_cache = _); end
  def rake_tasks(&block); end
  def reload_routes!; end
  def reloader; end
  def reloaders; end
  def require_environment!; end
  def routes_reloader; end
  def run_load_hooks!; end
  def runner(&blk); end
  def sandbox; end
  def sandbox=(_); end
  def sandbox?; end
  def secret_key_base; end
  def secrets; end
  def secrets=(_); end
  def to_app; end
  def watchable_args; end

  protected

  def default_middleware_stack; end
  def ordered_railties; end
  def railties_initializers(current); end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_tasks_blocks(app); end
  def validate_secret_key_base(secret_key_base); end

  private

  def build_middleware; end
  def build_request(env); end
  def generate_development_secret; end

  def self.add_lib_to_load_path!(root); end
  def self.create(initial_variable_values = _, &block); end
  def self.find_root(from); end
  def self.inherited(base); end
  def self.instance; end
end

module Rails::Application::Bootstrap
  include(::Rails::Initializable)
  extend(::Rails::Initializable::ClassMethods)
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  def initialize(*_); end

  def add_autoload_paths_to_load_path; end
  def add_autoload_paths_to_load_path=(_); end
  def allow_concurrency; end
  def allow_concurrency=(_); end
  def annotations; end
  def api_only; end
  def api_only=(value); end
  def asset_host; end
  def asset_host=(_); end
  def autoflush_log; end
  def autoflush_log=(_); end
  def autoloader; end
  def autoloader=(autoloader); end
  def beginning_of_week; end
  def beginning_of_week=(_); end
  def cache_classes; end
  def cache_classes=(_); end
  def cache_store; end
  def cache_store=(_); end
  def colorize_logging; end
  def colorize_logging=(val); end
  def consider_all_requests_local; end
  def consider_all_requests_local=(_); end
  def console; end
  def console=(_); end
  def content_security_policy(&block); end
  def content_security_policy_nonce_directives; end
  def content_security_policy_nonce_directives=(_); end
  def content_security_policy_nonce_generator; end
  def content_security_policy_nonce_generator=(_); end
  def content_security_policy_report_only; end
  def content_security_policy_report_only=(_); end
  def credentials; end
  def credentials=(_); end
  def database_configuration; end
  def debug_exception_response_format; end
  def debug_exception_response_format=(_); end
  def default_log_file; end
  def disable_sandbox; end
  def disable_sandbox=(_); end
  def eager_load; end
  def eager_load=(_); end
  def enable_dependency_loading; end
  def enable_dependency_loading=(_); end
  def encoding; end
  def encoding=(value); end
  def exceptions_app; end
  def exceptions_app=(_); end
  def file_watcher; end
  def file_watcher=(_); end
  def filter_parameters; end
  def filter_parameters=(_); end
  def filter_redirect; end
  def filter_redirect=(_); end
  def force_ssl; end
  def force_ssl=(_); end
  def helpers_paths; end
  def helpers_paths=(_); end
  def hosts; end
  def hosts=(_); end
  def load_database_yaml; end
  def load_defaults(target_version); end
  def loaded_config_version; end
  def log_formatter; end
  def log_formatter=(_); end
  def log_level; end
  def log_level=(_); end
  def log_tags; end
  def log_tags=(_); end
  def logger; end
  def logger=(_); end
  def paths; end
  def public_file_server; end
  def public_file_server=(_); end
  def railties_order; end
  def railties_order=(_); end
  def read_encrypted_secrets; end
  def read_encrypted_secrets=(_); end
  def relative_url_root; end
  def relative_url_root=(_); end
  def reload_classes_only_on_change; end
  def reload_classes_only_on_change=(_); end
  def require_master_key; end
  def require_master_key=(_); end
  def secret_key_base; end
  def secret_key_base=(_); end
  def session_options; end
  def session_options=(_); end
  def session_store(new_session_store = _, **options); end
  def session_store?; end
  def ssl_options; end
  def ssl_options=(_); end
  def time_zone; end
  def time_zone=(_); end
  def x; end
  def x=(_); end

  private

  def credentials_available_for_current_env?; end
  def default_credentials_content_path; end
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  def initialize; end

  def method_missing(method, *args); end

  private

  def respond_to_missing?(symbol, *_); end
end

class Rails::Application::DefaultMiddlewareStack
  def initialize(app, config, paths); end

  def app; end
  def build_stack; end
  def config; end
  def paths; end

  private

  def load_rack_cache; end
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include(::Rails::Initializable)
  extend(::Rails::Initializable::ClassMethods)
end

module Rails::Application::Finisher::InterlockHook
  def self.complete(_state); end
  def self.run; end
end

class Rails::Application::Finisher::MutexHook
  def initialize(mutex = _); end

  def complete(_state); end
  def run; end
end

Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::NonSymbolAccessDeprecatedHash < ::ActiveSupport::HashWithIndifferentAccess
  def initialize(value = _); end

  def []=(key, value); end

  private

  def convert_key(key); end
  def convert_value(value, options = _); end
end

class Rails::Application::RoutesReloader
  def initialize; end

  def eager_load; end
  def eager_load=(_); end
  def execute(*args, &block); end
  def execute_if_updated(*args, &block); end
  def paths; end
  def reload!; end
  def route_sets; end
  def updated?(*args, &block); end

  private

  def clear!; end
  def finalize!; end
  def load_paths; end
  def revert; end
  def updater; end
end

class Rails::ApplicationController < ::ActionController::Base

  private

  def _layout(lookup_context, formats); end
  def disable_content_security_policy_nonce!; end
  def local_request?; end
  def require_local!; end

  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self.middleware_stack; end
end

module Rails::Autoloaders
  extend(::Enumerable)

  def self.each; end
  def self.log!; end
  def self.logger=(logger); end
  def self.main; end
  def self.once; end
  def self.zeitwerk_enabled?; end
end

module Rails::Command
  include(::Rails::Command::Behavior)
  extend(::Rails::Command::Behavior::ClassMethods)
  extend(::ActiveSupport::Autoload)

  def self.environment; end
  def self.find_by_namespace(namespace, command_name = _); end
  def self.hidden_commands; end
  def self.invoke(full_namespace, args = _, **config); end
  def self.print_commands; end
  def self.root; end
end

class Rails::Command::Base < ::Thor
  include(::Rails::Command::Actions)

  def help; end

  def self.banner(*_); end
  def self.base_name; end
  def self.command_name; end
  def self.default_command_root; end
  def self.desc(usage = _, description = _, options = _); end
  def self.engine?; end
  def self.executable; end
  def self.hide_command!; end
  def self.inherited(base); end
  def self.namespace(name = _); end
  def self.perform(command, args, config); end
  def self.printing_commands; end
  def self.usage_path; end
end

class Rails::Command::Base::Error < ::Thor::Error
end

module Rails::Command::Behavior
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(ClassMethods)
end

module Rails::Command::Behavior::ClassMethods
  def no_color!; end
  def subclasses; end

  private

  def lookup(namespaces); end
  def lookup!; end
  def namespaces_to_paths(namespaces); end
  def print_list(base, namespaces); end
end

Rails::Command::HELP_MAPPINGS = T.let(T.unsafe(nil), Array)

module Rails::Command::Spellchecker
  def self.suggest(word, from:); end
end

module Rails::Configuration
end

class Rails::Configuration::Generators
  def initialize; end

  def aliases; end
  def aliases=(_); end
  def api_only; end
  def api_only=(_); end
  def colorize_logging; end
  def colorize_logging=(_); end
  def fallbacks; end
  def fallbacks=(_); end
  def hidden_namespaces; end
  def hide_namespace(namespace); end
  def method_missing(method, *args); end
  def options; end
  def options=(_); end
  def templates; end
  def templates=(_); end

  private

  def initialize_copy(source); end
end

class Rails::Configuration::MiddlewareStackProxy
  def initialize(operations = _, delete_operations = _); end

  def +(other); end
  def delete(*args, &block); end
  def insert(*args, &block); end
  def insert_after(*args, &block); end
  def insert_before(*args, &block); end
  def merge_into(other); end
  def swap(*args, &block); end
  def unshift(*args, &block); end
  def use(*args, &block); end

  protected

  def delete_operations; end
  def operations; end
end

class Rails::Engine < ::Rails::Railtie
  def initialize; end

  def app; end
  def call(env); end
  def config; end
  def eager_load!; end
  def endpoint; end
  def engine_name(*args, &block); end
  def env_config; end
  def helpers; end
  def helpers_paths; end
  def isolated?(*args, &block); end
  def load_console(app = _); end
  def load_generators(app = _); end
  def load_runner(app = _); end
  def load_seed; end
  def load_tasks(app = _); end
  def middleware(*args, &block); end
  def paths(*args, &block); end
  def railties; end
  def root(*args, &block); end
  def routes(&block); end
  def routes?; end

  protected

  def run_tasks_blocks(*_); end

  private

  def _all_autoload_once_paths; end
  def _all_autoload_paths; end
  def _all_load_paths(add_autoload_paths_to_load_path); end
  def build_middleware; end
  def build_request(env); end
  def default_middleware_stack; end
  def has_migrations?; end
  def load_config_initializer(initializer); end
  def with_inline_jobs; end

  def self.called_from; end
  def self.called_from=(_); end
  def self.eager_load!(*args, &block); end
  def self.endpoint(endpoint = _); end
  def self.engine_name(name = _); end
  def self.find(path); end
  def self.find_root(from); end
  def self.find_root_with_flag(flag, root_path, default = _); end
  def self.inherited(base); end
  def self.isolate_namespace(mod); end
  def self.isolated; end
  def self.isolated=(_); end
  def self.isolated?; end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  def initialize(root = _); end

  def autoload_once_paths; end
  def autoload_once_paths=(_); end
  def autoload_paths; end
  def autoload_paths=(_); end
  def eager_load_paths; end
  def eager_load_paths=(_); end
  def generators; end
  def javascript_path; end
  def javascript_path=(_); end
  def middleware; end
  def middleware=(_); end
  def paths; end
  def root; end
  def root=(value); end
end

class Rails::Engine::Railties
  include(::Enumerable)

  def initialize; end

  def -(others); end
  def _all; end
  def each(*args, &block); end
end

module Rails::Generators
  include(::Rails::Command::Behavior)
  extend(::Rails::Command::Behavior::ClassMethods)

  def namespace; end
  def namespace=(obj); end

  def self.aliases; end
  def self.api_only!; end
  def self.configure!(config); end
  def self.fallbacks; end
  def self.find_by_namespace(name, base = _, context = _); end
  def self.help(command = _); end
  def self.hidden_namespaces; end
  def self.hide_namespace(*namespaces); end
  def self.hide_namespaces(*namespaces); end
  def self.invoke(namespace, args = _, config = _); end
  def self.namespace; end
  def self.namespace=(obj); end
  def self.no_color!; end
  def self.options; end
  def self.print_generators; end
  def self.public_namespaces; end
  def self.sorted_groups; end
  def self.templates_path; end
end

module Rails::Generators::Actions
  def initialize(*_); end

  def add_source(source, options = _, &block); end
  def application(data = _, options = _); end
  def environment(data = _, options = _); end
  def gem(*args); end
  def gem_group(*names, &block); end
  def generate(what, *args); end
  def git(commands = _); end
  def github(repo, options = _, &block); end
  def initializer(filename, data = _); end
  def lib(filename, data = _); end
  def rails_command(command, options = _); end
  def rake(command, options = _); end
  def rakefile(filename, data = _); end
  def readme(path); end
  def route(routing_code); end
  def vendor(filename, data = _); end

  private

  def execute_command(executor, command, options = _); end
  def extify(name); end
  def indentation; end
  def log(*args); end
  def optimize_indentation(value, amount = _); end
  def quote(value); end
  def with_indentation(&block); end
end

class Rails::Generators::ActiveModel
  def initialize(name); end

  def destroy; end
  def errors; end
  def name; end
  def save; end
  def update(params = _); end

  def self.all(klass); end
  def self.build(klass, params = _); end
  def self.find(klass, params = _); end
end

module Rails::Generators::AppName

  private

  def app_const; end
  def app_const_base; end
  def app_name; end
  def camelized; end
  def defined_app_const_base; end
  def defined_app_const_base?; end
  def defined_app_name; end
  def original_app_name; end
  def valid_const?; end
end

Rails::Generators::AppName::RESERVED_NAMES = T.let(T.unsafe(nil), Array)

class Rails::Generators::Base < ::Thor::Group
  include(::Rails::Generators::Actions)
  include(::Thor::Actions)
  extend(::Thor::Actions::ClassMethods)


  private

  def class_collisions(*class_names); end
  def extract_last_module(nesting); end
  def indent(content, multiplier = _); end
  def module_namespacing(&block); end
  def namespace; end
  def namespace_dirs; end
  def namespaced?; end
  def namespaced_path; end
  def wrap_with_namespace(content); end

  def self.add_shebang_option!; end
  def self.banner; end
  def self.base_name; end
  def self.base_root; end
  def self.class_option(name, options = _); end
  def self.default_aliases_for_option(name, options); end
  def self.default_for_option(config, name, options, default); end
  def self.default_generator_root; end
  def self.default_source_root; end
  def self.default_value_for_option(name, options); end
  def self.desc(description = _); end
  def self.generator_name; end
  def self.hide!; end
  def self.hook_for(*names, &block); end
  def self.hooks; end
  def self.inherited(base); end
  def self.namespace(name = _); end
  def self.prepare_for_invocation(name, value); end
  def self.remove_hook_for(*names); end
  def self.source_root(path = _); end
  def self.usage_path; end
end

Rails::Generators::DEFAULT_ALIASES = T.let(T.unsafe(nil), Hash)

Rails::Generators::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

module Rails::Generators::Database
  def initialize(*_); end

  def convert_database_option_for_jruby; end
  def gem_for_database(database = _); end

  private

  def mysql_socket; end
end

Rails::Generators::Database::DATABASES = T.let(T.unsafe(nil), Array)

Rails::Generators::Database::JDBC_DATABASES = T.let(T.unsafe(nil), Array)

module Rails::Generators::Migration
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(ClassMethods)

  def create_migration(destination, data, config = _, &block); end
  def migration_class_name; end
  def migration_file_name; end
  def migration_number; end
  def migration_template(source, destination, config = _); end
  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end
  def migration_exists?(dirname, file_name); end
  def migration_lookup_at(dirname); end
  def next_migration_number(dirname); end
end

class Rails::Generators::NamedBase < ::Rails::Generators::Base
  def initialize(args, *options); end

  def file_name; end
  def js_template(source, destination); end
  def name; end
  def name=(_); end
  def template(source, *args, &block); end

  private

  def application_name; end
  def assign_names!(name); end
  def attributes_names; end
  def class_name; end
  def class_path; end
  def edit_helper; end
  def file_path; end
  def fixture_file_name; end
  def human_name; end
  def i18n_scope; end
  def index_helper; end
  def inside_template; end
  def inside_template?; end
  def model_resource_name(prefix: _); end
  def mountable_engine?; end
  def namespaced_class_path; end
  def new_helper; end
  def parse_attributes!; end
  def plural_file_name; end
  def plural_name; end
  def plural_route_name; end
  def plural_table_name; end
  def pluralize_table_names?; end
  def redirect_resource_name; end
  def regular_class_path; end
  def route_url; end
  def show_helper; end
  def singular_name; end
  def singular_route_name; end
  def singular_table_name; end
  def table_name; end
  def uncountable?; end
  def url_helper_prefix; end

  def self.check_class_collision(options = _); end
end

module Rails::Generators::ResourceHelpers
  def initialize(*args); end


  private

  def assign_controller_names!(name); end
  def controller_class_name; end
  def controller_class_path; end
  def controller_file_name; end
  def controller_file_path; end
  def controller_i18n_scope; end
  def controller_name; end
  def orm_class; end
  def orm_instance(name = _); end

  def self.included(base); end
end

class Rails::Generators::TestCase < ::ActiveSupport::TestCase
  include(::FileUtils)
  include(::FileUtils::StreamUtils_)
  include(::Rails::Generators::Testing::Assertions)
  include(::Rails::Generators::Testing::SetupAndTeardown)
  include(::Rails::Generators::Testing::Behaviour)
  include(::ActiveSupport::Testing::Stream)
  extend(::Rails::Generators::Testing::Behaviour::ClassMethods)

  def current_path; end
  def current_path=(val); end
  def current_path?; end
  def default_arguments; end
  def default_arguments=(val); end
  def default_arguments?; end
  def destination_root; end
  def destination_root=(val); end
  def destination_root?; end
  def generator_class; end
  def generator_class=(val); end
  def generator_class?; end

  def self.current_path; end
  def self.current_path=(val); end
  def self.current_path?; end
  def self.default_arguments; end
  def self.default_arguments=(val); end
  def self.default_arguments?; end
  def self.destination_root; end
  def self.destination_root=(val); end
  def self.destination_root?; end
  def self.generator_class; end
  def self.generator_class=(val); end
  def self.generator_class?; end
end

module Rails::Generators::Testing
end

module Rails::Generators::Testing::Assertions
  def assert_class_method(method, content, &block); end
  def assert_directory(relative, *contents); end
  def assert_field_default_value(attribute_type, value); end
  def assert_field_type(attribute_type, field_type); end
  def assert_file(relative, *contents); end
  def assert_instance_method(method, content); end
  def assert_method(method, content); end
  def assert_migration(relative, *contents, &block); end
  def assert_no_directory(relative); end
  def assert_no_file(relative); end
  def assert_no_migration(relative); end
end

module Rails::Generators::Testing::Behaviour
  include(::ActiveSupport::Testing::Stream)
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(ClassMethods)

  def create_generated_attribute(attribute_type, name = _, index = _); end
  def generator(args = _, options = _, config = _); end
  def run_generator(args = _, config = _); end

  private

  def destination_root_is_set?; end
  def ensure_current_path; end
  def migration_file_name(relative); end
  def prepare_destination; end
end

module Rails::Generators::Testing::Behaviour::ClassMethods
  def arguments(array); end
  def destination(path); end
  def tests(klass); end
end

module Rails::Generators::Testing::SetupAndTeardown
  def setup; end
  def teardown; end
end

module Rails::Info
  def properties; end
  def properties=(obj); end

  def self.inspect; end
  def self.properties; end
  def self.properties=(obj); end
  def self.property(name, value = _); end
  def self.to_html; end
  def self.to_s; end
end

class Rails::InfoController < ::Rails::ApplicationController
  def index; end
  def properties; end
  def routes; end

  protected

  def _layout_from_proc; end

  private

  def _layout(lookup_context, formats); end
  def match_route; end
  def with_leading_slash(path); end

  def self.__callbacks; end
  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self.middleware_stack; end
end

module Rails::Initializable
  def initializers; end
  def run_initializers(group = _, *args); end

  def self.included(base); end
end

module Rails::Initializable::ClassMethods
  def initializer(name, opts = _, &blk); end
  def initializers; end
  def initializers_chain; end
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include(::TSort)

  def +(other); end
  def tsort_each_child(initializer, &block); end
  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  def initialize(name, context, options, &block); end

  def after; end
  def before; end
  def belongs_to?(group); end
  def bind(context); end
  def block; end
  def context_class; end
  def name; end
  def run(*args); end
end

module Rails::LineFiltering
  def run(reporter, options = _); end
end

class Rails::MailersController < ::Rails::ApplicationController
  def index; end
  def preview; end

  private

  def _layout(lookup_context, formats); end
  def find_part(format); end
  def find_preferred_part(*formats); end
  def find_preview; end
  def locale_query(locale); end
  def part_query(mime_type); end
  def set_locale; end
  def show_previews?; end

  def self.__callbacks; end
  def self._helper_methods; end
  def self._helpers; end
  def self.middleware_stack; end
end

module Rails::Paths
end

class Rails::Paths::Path
  include(::Enumerable)

  def initialize(root, current, paths, options = _); end

  def <<(path); end
  def absolute_current; end
  def autoload!; end
  def autoload?; end
  def autoload_once!; end
  def autoload_once?; end
  def children; end
  def concat(paths); end
  def each(&block); end
  def eager_load!; end
  def eager_load?; end
  def existent; end
  def existent_directories; end
  def expanded; end
  def extensions; end
  def first; end
  def glob; end
  def glob=(_); end
  def last; end
  def load_path!; end
  def load_path?; end
  def push(path); end
  def skip_autoload!; end
  def skip_autoload_once!; end
  def skip_eager_load!; end
  def skip_load_path!; end
  def to_a; end
  def to_ary; end
  def unshift(*paths); end

  private

  def files_in(path); end
end

class Rails::Paths::Root
  def initialize(path); end

  def [](path); end
  def []=(path, value); end
  def add(path, options = _); end
  def all_paths; end
  def autoload_once; end
  def autoload_paths; end
  def eager_load; end
  def keys; end
  def load_paths; end
  def path; end
  def path=(_); end
  def values; end
  def values_at(*list); end

  private

  def filter_by(&block); end
end

module Rails::Rack
end

class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  def initialize(app, taggers = _); end

  def call(env); end

  private

  def call_app(request, env); end
  def compute_tags(request); end
  def finish(request); end
  def logger; end
  def started_request_message(request); end
end

class Rails::Railtie
  include(::Rails::Initializable)
  extend(::Rails::Initializable::ClassMethods)

  def initialize; end

  def config; end
  def configure(&block); end
  def railtie_name(*args, &block); end
  def railtie_namespace; end

  protected

  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_tasks_blocks(app); end

  private

  def each_registered_block(type, &block); end

  def self.abstract_railtie?; end
  def self.config(*args, &block); end
  def self.configure(&block); end
  def self.console(&blk); end
  def self.generators(&blk); end
  def self.inherited(base); end
  def self.instance; end
  def self.railtie_name(name = _); end
  def self.rake_tasks(&blk); end
  def self.runner(&blk); end
  def self.subclasses; end
end

Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  def initialize; end

  def after_initialize(&block); end
  def app_generators; end
  def app_middleware; end
  def before_configuration(&block); end
  def before_eager_load(&block); end
  def before_initialize(&block); end
  def eager_load_namespaces; end
  def respond_to?(name, include_private = _); end
  def to_prepare(&blk); end
  def to_prepare_blocks; end
  def watchable_dirs; end
  def watchable_files; end

  private

  def method_missing(name, *args, &blk); end

  def self.eager_load_namespaces; end
end

class Rails::Secrets
  def self.decrypt(data); end
  def self.encrypt(data); end
  def self.key; end
  def self.parse(paths, env:); end
  def self.read; end
  def self.read_for_editing(&block); end
  def self.root=(_); end
  def self.write(contents); end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  def initialize; end
end

class Rails::SourceAnnotationExtractor
  def initialize(tag); end

  def display(results, options = _); end
  def extract_annotations_from(file, pattern); end
  def find(dirs); end
  def find_in(dir); end
  def tag; end

  def self.enumerate(tag = _, options = _); end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  def to_s(options = _); end

  def self.directories; end
  def self.extensions; end
  def self.notes_task_deprecation_warning; end
  def self.register_directories(*dirs); end
  def self.register_extensions(*exts, &block); end
  def self.register_tags(*additional_tags); end
  def self.tags; end
end

module Rails::TestUnit
end

class Rails::TestUnit::CompositeFilter
  def initialize(runnable, filter, patterns); end

  def ===(method); end
  def named_filter; end

  private

  def derive_line_filters(patterns); end
  def derive_named_filter(filter); end
end

class Rails::TestUnit::Filter
  def initialize(runnable, file, line); end

  def ===(method); end

  private

  def definition_for(method); end
end

class Rails::TestUnit::Runner
  def filters; end

  def self.attach_before_load_options(opts); end
  def self.compose_filter(runnable, filter); end
  def self.filters; end
  def self.load_tests(argv); end
  def self.parse_options(argv); end
  def self.rake_run(argv = _); end
  def self.run(argv = _); end
end

class Rails::TestUnitRailtie < ::Rails::Railtie
end

module Rails::VERSION
end

Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  def index; end

  private

  def _layout(lookup_context, formats); end

  def self._helpers; end
  def self._layout; end
  def self._layout_conditions; end
  def self.middleware_stack; end
end

module Rails::Command::Actions
  def load_generators; end
  def load_tasks; end
  def require_application!; end
  def require_application_and_environment!; end
  def require_environment!; end
  def set_application_directory!; end
end

class Rails::Generators::Actions::CreateMigration < ::Thor::Actions::CreateFile
  def existing_migration; end
  def exists?; end
  def identical?; end
  def migration_dir; end
  def migration_file_name; end
  def relative_existing_migration; end
  def revoke!; end

  private

  def on_conflict_behavior; end
  def say_status(status, color, message = _); end
end

class Rails::Generators::Error < ::Thor::Error
end

class Rails::Generators::GeneratedAttribute
  def initialize(name, type = _, index_type = _, attr_options = _); end

  def attachment?; end
  def attachments?; end
  def attr_options; end
  def column_name; end
  def default; end
  def field_type; end
  def foreign_key?; end
  def has_index?; end
  def has_uniq_index?; end
  def human_name; end
  def index_name; end
  def index_name=(_); end
  def inject_index_options; end
  def inject_options; end
  def name; end
  def name=(_); end
  def options_for_migration; end
  def password_digest?; end
  def plural_name; end
  def polymorphic?; end
  def reference?; end
  def required?; end
  def rich_text?; end
  def singular_name; end
  def token?; end
  def type; end
  def type=(_); end
  def virtual?; end

  def self.parse(column_definition); end
  def self.reference?(type); end
end

Rails::Generators::GeneratedAttribute::INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

Rails::Generators::GeneratedAttribute::UNIQ_INDEX_OPTIONS = T.let(T.unsafe(nil), Array)

module Rails::Generators::ModelHelpers
  def initialize(args, *_options); end

  def skip_warn; end
  def skip_warn=(obj); end

  def self.included(base); end
  def self.skip_warn; end
  def self.skip_warn=(obj); end
end

Rails::Generators::ModelHelpers::IRREGULAR_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

Rails::Generators::ModelHelpers::PLURAL_MODEL_NAME_WARN_MESSAGE = T.let(T.unsafe(nil), String)

SourceAnnotationExtractor = Rails::SourceAnnotationExtractor
