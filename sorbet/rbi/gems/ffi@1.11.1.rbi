# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module FFI
  def self.add_typedef(old, add); end
  def self.errno; end
  def self.errno=(error); end
  def self.find_type(name, type_map = _); end
  def self.map_library_name(lib); end
  def self.type_size(type); end
  def self.typedef(old, add); end
end

class FFI::AbstractMemory
  def [](_); end
  def __copy_from__(_, _); end
  def clear; end
  def get(_, _); end
  def get_array_of_char(_, _); end
  def get_array_of_double(_, _); end
  def get_array_of_float(_, _); end
  def get_array_of_float32(_, _); end
  def get_array_of_float64(_, _); end
  def get_array_of_int(_, _); end
  def get_array_of_int16(_, _); end
  def get_array_of_int32(_, _); end
  def get_array_of_int64(_, _); end
  def get_array_of_int8(_, _); end
  def get_array_of_long(_, _); end
  def get_array_of_long_long(_, _); end
  def get_array_of_pointer(_, _); end
  def get_array_of_short(_, _); end
  def get_array_of_string(*_); end
  def get_array_of_uchar(_, _); end
  def get_array_of_uint(_, _); end
  def get_array_of_uint16(_, _); end
  def get_array_of_uint32(_, _); end
  def get_array_of_uint64(_, _); end
  def get_array_of_uint8(_, _); end
  def get_array_of_ulong(_, _); end
  def get_array_of_ulong_long(_, _); end
  def get_array_of_ushort(_, _); end
  def get_bytes(_, _); end
  def get_char(_); end
  def get_double(_); end
  def get_float(_); end
  def get_float32(_); end
  def get_float64(_); end
  def get_int(_); end
  def get_int16(_); end
  def get_int32(_); end
  def get_int64(_); end
  def get_int8(_); end
  def get_long(_); end
  def get_long_long(_); end
  def get_pointer(_); end
  def get_short(_); end
  def get_string(*_); end
  def get_uchar(_); end
  def get_uint(_); end
  def get_uint16(_); end
  def get_uint32(_); end
  def get_uint64(_); end
  def get_uint8(_); end
  def get_ulong(_); end
  def get_ulong_long(_); end
  def get_ushort(_); end
  def put(_, _, _); end
  def put_array_of_char(_, _); end
  def put_array_of_double(_, _); end
  def put_array_of_float(_, _); end
  def put_array_of_float32(_, _); end
  def put_array_of_float64(_, _); end
  def put_array_of_int(_, _); end
  def put_array_of_int16(_, _); end
  def put_array_of_int32(_, _); end
  def put_array_of_int64(_, _); end
  def put_array_of_int8(_, _); end
  def put_array_of_long(_, _); end
  def put_array_of_long_long(_, _); end
  def put_array_of_pointer(_, _); end
  def put_array_of_short(_, _); end
  def put_array_of_uchar(_, _); end
  def put_array_of_uint(_, _); end
  def put_array_of_uint16(_, _); end
  def put_array_of_uint32(_, _); end
  def put_array_of_uint64(_, _); end
  def put_array_of_uint8(_, _); end
  def put_array_of_ulong(_, _); end
  def put_array_of_ulong_long(_, _); end
  def put_array_of_ushort(_, _); end
  def put_bytes(*_); end
  def put_char(_, _); end
  def put_double(_, _); end
  def put_float(_, _); end
  def put_float32(_, _); end
  def put_float64(_, _); end
  def put_int(_, _); end
  def put_int16(_, _); end
  def put_int32(_, _); end
  def put_int64(_, _); end
  def put_int8(_, _); end
  def put_long(_, _); end
  def put_long_long(_, _); end
  def put_pointer(_, _); end
  def put_short(_, _); end
  def put_string(_, _); end
  def put_uchar(_, _); end
  def put_uint(_, _); end
  def put_uint16(_, _); end
  def put_uint32(_, _); end
  def put_uint64(_, _); end
  def put_uint8(_, _); end
  def put_ulong(_, _); end
  def put_ulong_long(_, _); end
  def put_ushort(_, _); end
  def read_array_of_char(_); end
  def read_array_of_double(_); end
  def read_array_of_float(_); end
  def read_array_of_int(_); end
  def read_array_of_int16(_); end
  def read_array_of_int32(_); end
  def read_array_of_int64(_); end
  def read_array_of_int8(_); end
  def read_array_of_long(_); end
  def read_array_of_long_long(_); end
  def read_array_of_pointer(_); end
  def read_array_of_short(_); end
  def read_array_of_uchar(_); end
  def read_array_of_uint(_); end
  def read_array_of_uint16(_); end
  def read_array_of_uint32(_); end
  def read_array_of_uint64(_); end
  def read_array_of_uint8(_); end
  def read_array_of_ulong(_); end
  def read_array_of_ulong_long(_); end
  def read_array_of_ushort(_); end
  def read_bytes(_); end
  def read_char; end
  def read_double; end
  def read_float; end
  def read_int; end
  def read_int16; end
  def read_int32; end
  def read_int64; end
  def read_int8; end
  def read_long; end
  def read_long_long; end
  def read_pointer; end
  def read_short; end
  def read_uchar; end
  def read_uint; end
  def read_uint16; end
  def read_uint32; end
  def read_uint64; end
  def read_uint8; end
  def read_ulong; end
  def read_ulong_long; end
  def read_ushort; end
  def size; end
  def total; end
  def type_size; end
  def write_array_of_char(_); end
  def write_array_of_double(_); end
  def write_array_of_float(_); end
  def write_array_of_int(_); end
  def write_array_of_int16(_); end
  def write_array_of_int32(_); end
  def write_array_of_int64(_); end
  def write_array_of_int8(_); end
  def write_array_of_long(_); end
  def write_array_of_long_long(_); end
  def write_array_of_pointer(_); end
  def write_array_of_short(_); end
  def write_array_of_uchar(_); end
  def write_array_of_uint(_); end
  def write_array_of_uint16(_); end
  def write_array_of_uint32(_); end
  def write_array_of_uint64(_); end
  def write_array_of_uint8(_); end
  def write_array_of_ulong(_); end
  def write_array_of_ulong_long(_); end
  def write_array_of_ushort(_); end
  def write_bytes(*_); end
  def write_char(_); end
  def write_double(_); end
  def write_float(_); end
  def write_int(_); end
  def write_int16(_); end
  def write_int32(_); end
  def write_int64(_); end
  def write_int8(_); end
  def write_long(_); end
  def write_long_long(_); end
  def write_pointer(_); end
  def write_short(_); end
  def write_uchar(_); end
  def write_uint(_); end
  def write_uint16(_); end
  def write_uint32(_); end
  def write_uint64(_); end
  def write_uint8(_); end
  def write_ulong(_); end
  def write_ulong_long(_); end
  def write_ushort(_); end
end

class FFI::ArrayType < ::FFI::Type
  def initialize(_, _); end

  def elem_type; end
  def length; end
end

class FFI::AutoPointer < ::FFI::Pointer
  extend(::FFI::DataConverter)

  def initialize(ptr, proc = _, &block); end

  def autorelease=(autorelease); end
  def autorelease?; end
  def free; end

  def self.from_native(val, ctx); end
  def self.native_type; end
end

class FFI::AutoPointer::CallableReleaser < ::FFI::AutoPointer::Releaser
  def release(ptr); end
end

class FFI::AutoPointer::DefaultReleaser < ::FFI::AutoPointer::Releaser
  def release(ptr); end
end

class FFI::AutoPointer::Releaser
  def initialize(ptr, proc); end

  def autorelease; end
  def autorelease=(_); end
  def call(*args); end
  def free; end
end

class FFI::Bitmask < ::FFI::Enum
  def initialize(*args); end

  def [](*query); end
  def from_native(val, ctx); end
  def to_native(query, ctx); end
end

class FFI::Buffer < ::FFI::AbstractMemory
  def initialize(*_); end

  def +(_); end
  def inspect; end
  def length; end
  def order(*_); end
  def slice(_, _); end

  private

  def initialize_copy(_); end

  def self.alloc_in(*_); end
  def self.alloc_inout(*_); end
  def self.alloc_out(*_); end
  def self.new_in(*_); end
  def self.new_inout(*_); end
  def self.new_out(*_); end
end

FFI::CURRENT_PROCESS = T.let(T.unsafe(nil), Object)

FFI::CallbackInfo = FFI::FunctionType

module FFI::DataConverter
  def from_native(value, ctx); end
  def native_type(type = _); end
  def to_native(value, ctx); end
end

class FFI::DynamicLibrary
  def initialize(_, _); end

  def find_function(_); end
  def find_symbol(_); end
  def find_variable(_); end
  def last_error; end
  def name; end

  def self.last_error; end
  def self.open(_, _); end
end

FFI::DynamicLibrary::RTLD_ALL_MASK = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_BINDING_MASK = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_DEEPBIND = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_FIRST = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_GLOBAL = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_LAZY = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_LOCAL = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_LOCATION_MASK = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_MEMBER = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_NODELETE = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_NOLOAD = T.let(T.unsafe(nil), Integer)

FFI::DynamicLibrary::RTLD_NOW = T.let(T.unsafe(nil), Integer)

class FFI::DynamicLibrary::Symbol < ::FFI::Pointer
  def inspect; end

  private

  def initialize_copy(_); end
end

class FFI::Enum
  include(::FFI::DataConverter)

  def initialize(*args); end

  def [](query); end
  def find(query); end
  def from_native(val, ctx); end
  def native_type; end
  def symbol_map; end
  def symbols; end
  def tag; end
  def to_h; end
  def to_hash; end
  def to_native(val, ctx); end
end

class FFI::Enums
  def initialize; end

  def <<(enum); end
  def __map_symbol(symbol); end
  def find(query); end
end

class FFI::Function < ::FFI::Pointer
  def initialize(*_); end

  def attach(_, _); end
  def autorelease; end
  def autorelease=(_); end
  def autorelease?; end
  def call(*_); end
  def free; end

  private

  def initialize_copy(_); end
end

FFI::FunctionInfo = FFI::FunctionType

class FFI::FunctionType < ::FFI::Type
  def initialize(*_); end

  def param_types; end
  def result_type; end
end

module FFI::IO
  def self.for_fd(fd, mode = _); end
  def self.native_read(io, buf, len); end
end

module FFI::LastError

  private

  def error; end
  def error=(_); end

  def self.error; end
  def self.error=(_); end
end

module FFI::Library
  def attach_function(name, func, args, returns = _, options = _); end
  def attach_variable(mname, a1, a2 = _); end
  def bitmask(*args); end
  def callback(*args); end
  def enum(*args); end
  def enum_type(name); end
  def enum_value(symbol); end
  def ffi_convention(convention = _); end
  def ffi_lib(*names); end
  def ffi_lib_flags(*flags); end
  def ffi_libraries; end
  def find_type(t); end
  def function_names(name, arg_types); end
  def typedef(old, add, info = _); end

  private

  def generic_enum(klass, *args); end

  def self.extended(mod); end
end

FFI::Library::CURRENT_PROCESS = T.let(T.unsafe(nil), Object)

FFI::Library::FlagsMap = T.let(T.unsafe(nil), Hash)

FFI::Library::LIBC = T.let(T.unsafe(nil), String)

class FFI::ManagedStruct < ::FFI::Struct
  def initialize(pointer = _); end
end

class FFI::MemoryPointer < ::FFI::Pointer
  def initialize(*_); end

  def self.from_string(_); end
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
end

FFI::NativeType::BOOL = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::BUFFER_IN = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::BUFFER_INOUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::BUFFER_OUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::FLOAT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::FLOAT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::INT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::INT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::INT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::INT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::LONGDOUBLE = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::POINTER = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::STRING = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::UINT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::UINT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::UINT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::UINT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::ULONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::VARARGS = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::NativeType::VOID = T.let(T.unsafe(nil), FFI::Type::Builtin)

class FFI::NotFoundError < ::LoadError
  def initialize(function, *libraries); end
end

class FFI::NullPointerError < ::RuntimeError
end

module FFI::Platform
  def self.bsd?; end
  def self.is_os(os); end
  def self.mac?; end
  def self.solaris?; end
  def self.unix?; end
  def self.windows?; end
end

FFI::Platform::ADDRESS_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::ADDRESS_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::ARCH = T.let(T.unsafe(nil), String)

FFI::Platform::BIG_ENDIAN = T.let(T.unsafe(nil), Integer)

FFI::Platform::BYTE_ORDER = T.let(T.unsafe(nil), Integer)

FFI::Platform::CONF_DIR = T.let(T.unsafe(nil), String)

FFI::Platform::CPU = T.let(T.unsafe(nil), String)

FFI::Platform::DOUBLE_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::DOUBLE_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::FLOAT_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::FLOAT_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT16_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT16_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT32_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT32_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT64_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT64_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT8_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::INT8_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::IS_BSD = T.let(T.unsafe(nil), TrueClass)

FFI::Platform::IS_MAC = T.let(T.unsafe(nil), TrueClass)

FFI::Platform::LIBC = T.let(T.unsafe(nil), String)

FFI::Platform::LIBPREFIX = T.let(T.unsafe(nil), String)

FFI::Platform::LIBSUFFIX = T.let(T.unsafe(nil), String)

FFI::Platform::LITTLE_ENDIAN = T.let(T.unsafe(nil), Integer)

FFI::Platform::LONG_ALIGN = T.let(T.unsafe(nil), Integer)

FFI::Platform::LONG_SIZE = T.let(T.unsafe(nil), Integer)

FFI::Platform::NAME = T.let(T.unsafe(nil), String)

FFI::Platform::OS = T.let(T.unsafe(nil), String)

FFI::Platform::OSVERSION = T.let(T.unsafe(nil), Integer)

class FFI::PlatformError < ::LoadError
end

class FFI::Pointer < ::FFI::AbstractMemory
  def initialize(*_); end

  def +(_); end
  def ==(_); end
  def address; end
  def autorelease=(_); end
  def autorelease?; end
  def free; end
  def inspect; end
  def null?; end
  def order(*_); end
  def read(type); end
  def read_array_of_type(type, reader, length); end
  def read_string(len = _); end
  def read_string_length(len); end
  def read_string_to_null; end
  def slice(_, _); end
  def to_i; end
  def to_ptr; end
  def to_s; end
  def type_size; end
  def write(type, value); end
  def write_array_of_type(type, writer, ary); end
  def write_string(str, len = _); end
  def write_string_length(str, len); end

  private

  def initialize_copy(_); end

  def self.size; end
end

FFI::Pointer::NULL = T.let(T.unsafe(nil), FFI::Pointer)

FFI::Pointer::SIZE = T.let(T.unsafe(nil), Integer)

FFI::SizeTypes = T.let(T.unsafe(nil), Hash)

class FFI::StrPtrConverter
  extend(::FFI::DataConverter)

  def self.from_native(val, ctx); end
end

class FFI::Struct
  def initialize(*_); end

  def [](_); end
  def []=(_, _); end
  def align; end
  def alignment; end
  def clear; end
  def layout; end
  def members; end
  def null?; end
  def offset_of(name); end
  def offsets; end
  def order(*_); end
  def pointer; end
  def size; end
  def to_ptr; end
  def values; end

  private

  def initialize_copy(_); end
  def layout=(_); end
  def pointer=(_); end

  def self.alignment; end
  def self.alloc_in(*_); end
  def self.alloc_inout(*_); end
  def self.alloc_out(*_); end
  def self.auto_ptr; end
  def self.by_ref(flags = _); end
  def self.by_value; end
  def self.in; end
  def self.layout(*spec); end
  def self.members; end
  def self.new_in(*_); end
  def self.new_inout(*_); end
  def self.new_out(*_); end
  def self.offset_of(name); end
  def self.offsets; end
  def self.out; end
  def self.ptr(flags = _); end
  def self.size; end
  def self.size=(size); end
  def self.val; end
end

class FFI::Struct::InlineArray
  include(::Enumerable)

  def initialize(_, _); end

  def [](_); end
  def []=(_, _); end
  def each; end
  def size; end
  def to_a; end
  def to_ptr; end
end

class FFI::Struct::ManagedStructConverter < ::FFI::StructByReference
  def initialize(struct_class); end

  def from_native(ptr, ctx); end
end

class FFI::StructByReference
  include(::FFI::DataConverter)

  def initialize(struct_class); end

  def from_native(value, ctx); end
  def native_type; end
  def struct_class; end
  def to_native(value, ctx); end
end

class FFI::StructByValue < ::FFI::Type
  def initialize(_); end

  def layout; end
  def struct_class; end
end

class FFI::StructLayout < ::FFI::Type
  def initialize(_, _, _); end

  def [](_); end
  def __union!; end
  def fields; end
  def members; end
  def offset_of(field_name); end
  def offsets; end
  def to_a; end
end

class FFI::StructLayout::Array < ::FFI::StructLayout::Field
  def get(_); end
  def put(_, _); end
end

class FFI::StructLayout::CharArray < ::FFI::Struct::InlineArray
  def to_s; end
  def to_str; end
end

class FFI::StructLayout::Enum < ::FFI::StructLayout::Field
  def get(ptr); end
  def put(ptr, value); end
end

class FFI::StructLayout::Field
  def initialize(*_); end

  def alignment; end
  def get(_); end
  def name; end
  def offset; end
  def put(_, _); end
  def size; end
  def type; end
end

class FFI::StructLayout::Function < ::FFI::StructLayout::Field
  def get(_); end
  def put(_, _); end
end

class FFI::StructLayout::InnerStruct < ::FFI::StructLayout::Field
  def get(ptr); end
  def put(ptr, value); end
end

class FFI::StructLayout::Mapped < ::FFI::StructLayout::Field
  def initialize(name, offset, type, orig_field); end

  def get(ptr); end
  def put(ptr, value); end
end

class FFI::StructLayout::Number < ::FFI::StructLayout::Field
end

class FFI::StructLayout::Pointer < ::FFI::StructLayout::Field
end

class FFI::StructLayout::String < ::FFI::StructLayout::Field
end

class FFI::StructLayoutBuilder
  def initialize; end

  def add(name, type, offset = _); end
  def add_array(name, type, count, offset = _); end
  def add_field(name, type, offset = _); end
  def add_struct(name, type, offset = _); end
  def alignment; end
  def alignment=(align); end
  def build; end
  def packed=(packed); end
  def size; end
  def size=(size); end
  def union=(is_union); end
  def union?; end

  private

  def align(offset, align); end
  def field_for_type(name, offset, type); end
end

FFI::StructLayoutBuilder::NUMBER_TYPES = T.let(T.unsafe(nil), Array)

FFI::TYPE_BOOL = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_BUFFER_IN = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_BUFFER_INOUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_BUFFER_OUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_FLOAT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_FLOAT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_INT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_INT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_INT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_INT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_LONGDOUBLE = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_POINTER = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_STRING = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_UINT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_UINT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_UINT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_UINT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_ULONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_VARARGS = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TYPE_VOID = T.let(T.unsafe(nil), FFI::Type::Builtin)

class FFI::Type
  def initialize(_); end

  def alignment; end
  def inspect; end
  def size; end
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::BOOL = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::BUFFER_IN = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::BUFFER_INOUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::BUFFER_OUT = T.let(T.unsafe(nil), FFI::Type::Builtin)

class FFI::Type::Builtin < ::FFI::Type
  def inspect; end
end

FFI::Type::CHAR = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::DOUBLE = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::FLOAT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::FLOAT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::FLOAT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::Function = FFI::FunctionType

FFI::Type::INT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::INT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::INT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::INT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::INT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::LONGDOUBLE = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::LONG_LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

class FFI::Type::Mapped < ::FFI::Type
  def initialize(_); end

  def from_native(*_); end
  def native_type; end
  def to_native(*_); end
  def type; end
end

FFI::Type::POINTER = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SCHAR = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SHORT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SINT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SLONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SLONG_LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::SSHORT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::STRING = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::Struct = FFI::StructByValue

FFI::Type::UCHAR = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::UINT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::UINT16 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::UINT32 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::UINT64 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::UINT8 = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::ULONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::ULONG_LONG = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::USHORT = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::VARARGS = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::Type::VOID = T.let(T.unsafe(nil), FFI::Type::Builtin)

FFI::TypeDefs = T.let(T.unsafe(nil), Hash)

FFI::USE_THIS_PROCESS_AS_LIBRARY = T.let(T.unsafe(nil), Object)

class FFI::Union < ::FFI::Struct
  def self.builder; end
end

class FFI::VariadicInvoker
  def initialize(_, _, _, _); end

  def attach(mod, mname); end
  def call(*args, &block); end
  def init(arg_types, type_map); end
  def invoke(_, _); end
end
