# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module SassC
  def self.load_paths; end
end

module SassC::Rails
end

class SassC::Rails::Importer < ::SassC::Importer
  def imports(path, parent_path); end

  private

  def context; end
  def extension_for_file(file); end
  def glob_imports(base, glob, current_file); end
  def globbed_files(base, glob); end
  def load_paths; end
  def record_import_as_dependency(path); end
end

class SassC::Rails::Importer::CSSExtension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssSassExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssScssExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::ERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
end

SassC::Rails::Importer::EXTENSIONS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::Extension
  def initialize(postfix = _); end

  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

SassC::Rails::Importer::GLOB = T.let(T.unsafe(nil), Regexp)

SassC::Rails::Importer::PREFIXS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::SassERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Railtie < ::Rails::Railtie
end

class SassC::Rails::SassTemplate < ::Sprockets::SassProcessor
  def initialize(options = _, &block); end

  def call(input); end
  def config_options; end
  def line_comments?; end
  def load_paths; end
  def safe_merge(_key, left, right); end
  def sass_style; end
end

module SassC::Rails::SassTemplate::Functions
  def asset_data_url(path); end
  def asset_path(path, options = _); end
  def asset_url(path, options = _); end
end

class SassC::Rails::ScssTemplate < ::SassC::Rails::SassTemplate
  def self.syntax; end
end

SassC::Rails::VERSION = T.let(T.unsafe(nil), String)

SassC::VERSION = T.let(T.unsafe(nil), String)

module Sprockets
  extend(::Sprockets::Configuration)
  extend(::Sprockets::Paths)
  extend(::Sprockets::Mime)
  extend(::Sprockets::Engines)
  extend(::Sprockets::Transformers)
  extend(::Sprockets::HTTPUtils)
  extend(::Sprockets::Processing)
  extend(::Sprockets::ProcessorUtils)
  extend(::Sprockets::Compressing)
  extend(::Sprockets::Dependencies)
  extend(::Sprockets::PathDigestUtils)
  extend(::Sprockets::DigestUtils)
  extend(::Sprockets::PathUtils)
  extend(::Sprockets::URIUtils)
  extend(::Sprockets::Utils)
end

Sprockets::Index = Sprockets::CachedEnvironment

class Sprockets::SassCompressor
  def initialize(options = _); end

  def cache_key; end
  def call(*args); end
  def evaluate(*args); end

  def self.cache_key; end
  def self.call(input); end
  def self.instance; end
end

Sprockets::SassCompressor::VERSION = T.let(T.unsafe(nil), String)

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

Sprockets::VERSION = T.let(T.unsafe(nil), String)
