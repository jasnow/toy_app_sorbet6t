# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: strong

module ChildProcess
  def self.arch; end
  def self.build(*args); end
  def self.close_on_exec(file); end
  def self.jruby?; end
  def self.linux?; end
  def self.logger; end
  def self.logger=(_); end
  def self.new(*args); end
  def self.os; end
  def self.platform; end
  def self.platform_name; end
  def self.posix_spawn=(bool); end
  def self.posix_spawn?; end
  def self.unix?; end
  def self.windows?; end
end

class ChildProcess::AbstractIO
  def _stdin=(io); end
  def inherit!; end
  def stderr; end
  def stderr=(io); end
  def stdin; end
  def stdout; end
  def stdout=(io); end

  private

  def check_type(io); end
end

class ChildProcess::AbstractProcess
  def initialize(args); end

  def alive?; end
  def crashed?; end
  def cwd; end
  def cwd=(_); end
  def detach; end
  def detach=(_); end
  def duplex; end
  def duplex=(_); end
  def environment; end
  def exit_code; end
  def exited?; end
  def io; end
  def leader; end
  def leader=(_); end
  def pid; end
  def poll_for_exit(timeout); end
  def start; end
  def started?; end
  def stop(timeout = _); end
  def wait; end

  private

  def assert_started; end
  def detach?; end
  def duplex?; end
  def launch_process; end
  def leader?; end
  def log(*args); end
end

ChildProcess::AbstractProcess::POLL_INTERVAL = T.let(T.unsafe(nil), Float)

class ChildProcess::Error < ::StandardError
end

class ChildProcess::InvalidEnvironmentVariable < ::ChildProcess::Error
end

class ChildProcess::LaunchError < ::ChildProcess::Error
end

class ChildProcess::MissingFFIError < ::ChildProcess::Error
  def initialize; end
end

class ChildProcess::MissingPlatformError < ::ChildProcess::Error
  def initialize; end
end

class ChildProcess::SubclassResponsibility < ::ChildProcess::Error
end

class ChildProcess::TimeoutError < ::ChildProcess::Error
end

module ChildProcess::Unix
end

class ChildProcess::Unix::ForkExecProcess < ::ChildProcess::Unix::Process

  private

  def launch_process; end
  def set_env; end
end

class ChildProcess::Unix::IO < ::ChildProcess::AbstractIO

  private

  def check_type(io); end
end

class ChildProcess::Unix::Process < ::ChildProcess::AbstractProcess
  def exited?; end
  def io; end
  def pid; end
  def stop(timeout = _); end
  def wait; end

  private

  def _pid; end
  def send_kill; end
  def send_signal(sig); end
  def send_term; end
  def set_exit_code(status); end
end

ChildProcess::VERSION = T.let(T.unsafe(nil), String)

class FFI::MemoryPointer < ::FFI::Pointer
  def initialize(*_); end

  def self.from_string(_); end
end
