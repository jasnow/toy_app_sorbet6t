# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

class RDoc::ClassModule < ::RDoc::Context
  def initialize(name, superclass = _); end

  def add_comment(comment, location); end
  def add_things(my_things, other_things); end
  def ancestors; end
  def aref; end
  def aref_prefix; end
  def clear_comment; end
  def comment=(comment); end
  def comment_location; end
  def comment_location=(_); end
  def complete(min_visibility); end
  def constant_aliases; end
  def constant_aliases=(_); end
  def description; end
  def diagram; end
  def diagram=(_); end
  def direct_ancestors; end
  def document_self_or_methods; end
  def documented?; end
  def each_ancestor; end
  def find_ancestor_local_symbol(symbol); end
  def find_class_named(name); end
  def full_name; end
  def is_alias_for; end
  def is_alias_for=(_); end
  def marshal_dump; end
  def marshal_load(array); end
  def merge(class_module); end
  def merge_collections(mine, other, other_files, &block); end
  def merge_sections(cm); end
  def module?; end
  def name=(new_name); end
  def name_for_path; end
  def non_aliases; end
  def parse(comment_location); end
  def path; end
  def remove_nodoc_children; end
  def remove_things(my_things, other_files); end
  def search_record; end
  def store=(store); end
  def superclass; end
  def superclass=(superclass); end
  def to_s; end
  def type; end
  def update_aliases; end
  def update_extends; end
  def update_includes; end
  def with_documentation?; end

  def self.from_module(class_type, mod); end
end

RDoc::ClassModule::MARSHAL_VERSION = T.let(T.unsafe(nil), Integer)

class RDoc::Generator::SDoc
  include(::SDoc::Helpers)
  include(::SDoc::Templatable)
  include(::SDoc::GitHub)
  include(::ERB::Util)

  def initialize(store, options); end

  def base_dir; end
  def class_dir; end
  def file_dir; end
  def generate; end
  def options; end
  def store; end

  protected

  def copy_resources; end
  def debug_msg(*msg); end
  def generate_class_files; end
  def generate_class_tree; end
  def generate_class_tree_level(classes, visited = _); end
  def generate_file_files; end
  def generate_file_tree; end
  def generate_file_tree_level(tree); end
  def generate_index_file; end
  def generate_search_index; end
  def index_path; end

  def self.setup_options(options); end
end

RDoc::Generator::SDoc::CLASS_DIR = T.let(T.unsafe(nil), String)

RDoc::Generator::SDoc::DESCRIPTION = T.let(T.unsafe(nil), String)

RDoc::Generator::SDoc::FILE_DIR = T.let(T.unsafe(nil), String)

class RDoc::Generator::SDoc::FilesTree
  def add(path, url); end
  def children; end
end

RDoc::Generator::SDoc::GENERATOR_DIRS = T.let(T.unsafe(nil), Array)

RDoc::Generator::SDoc::RESOURCES_DIR = T.let(T.unsafe(nil), String)

RDoc::Generator::SDoc::SEARCH_INDEX_FILE = T.let(T.unsafe(nil), String)

RDoc::Generator::SDoc::TREE_FILE = T.let(T.unsafe(nil), String)

class RDoc::Options
  def initialize; end

  def ==(other); end
  def charset; end
  def charset=(_); end
  def check_files; end
  def check_generator; end
  def coverage_report; end
  def coverage_report=(_); end
  def default_title=(string); end
  def dry_run; end
  def dry_run=(_); end
  def encode_with(coder); end
  def encoding; end
  def encoding=(_); end
  def exclude; end
  def exclude=(_); end
  def files; end
  def files=(_); end
  def finish; end
  def finish_page_dir; end
  def force_output; end
  def force_output=(_); end
  def force_update; end
  def force_update=(_); end
  def formatter; end
  def formatter=(_); end
  def generator; end
  def generator=(_); end
  def generator_descriptions; end
  def generator_name; end
  def generator_options; end
  def generator_options=(_); end
  def github; end
  def github=(_); end
  def hyperlink_all; end
  def hyperlink_all=(_); end
  def init_ivars; end
  def init_with(map); end
  def line_numbers; end
  def line_numbers=(_); end
  def locale; end
  def locale=(_); end
  def locale_dir; end
  def locale_dir=(_); end
  def main_page; end
  def main_page=(_); end
  def markup; end
  def markup=(_); end
  def op_dir; end
  def op_dir=(_); end
  def option_parser; end
  def option_parser=(_); end
  def output_decoration; end
  def output_decoration=(_); end
  def page_dir; end
  def page_dir=(_); end
  def parse(argv); end
  def pipe; end
  def pipe=(_); end
  def quiet; end
  def quiet=(bool); end
  def rdoc_include; end
  def rdoc_include=(_); end
  def root; end
  def root=(_); end
  def sanitize_path(path); end
  def search_index; end
  def search_index=(_); end
  def setup_generator(generator_name = _); end
  def show_hash; end
  def show_hash=(_); end
  def static_path; end
  def static_path=(_); end
  def tab_width; end
  def tab_width=(_); end
  def template; end
  def template=(_); end
  def template_dir; end
  def template_dir=(_); end
  def template_dir_for(template); end
  def template_stylesheets; end
  def template_stylesheets=(_); end
  def title; end
  def title=(_); end
  def update_output_dir; end
  def update_output_dir=(_); end
  def verbosity; end
  def verbosity=(_); end
  def visibility; end
  def visibility=(visibility); end
  def warn(message); end
  def webcvs; end
  def webcvs=(_); end
  def write_options; end
  def yaml_initialize(tag, map); end
end

RDoc::Options::DEPRECATED = T.let(T.unsafe(nil), Hash)

RDoc::Options::Directory = T.let(T.unsafe(nil), Object)

RDoc::Options::Path = T.let(T.unsafe(nil), Object)

RDoc::Options::PathArray = T.let(T.unsafe(nil), Object)

RDoc::Options::SPECIAL = T.let(T.unsafe(nil), Array)

RDoc::Options::Template = T.let(T.unsafe(nil), Object)

module SDoc
end

module SDoc::GitHub
  def github_url(path); end

  protected

  def have_git?; end
  def last_commit_sha1; end
  def path_relative_to_repository(path); end
  def path_to_git_dir(path); end
  def repository_url(path); end
end

module SDoc::Helpers
  def each_letter_group(methods, &block); end
  def strip_tags(text); end
  def truncate(text, options = _); end

  protected

  def group_name(name); end
end

module SDoc::Templatable
  def eval_template(templatefile, context); end
  def include_template(template_name, local_assigns = _); end
  def render_template(templatefile, context, outfile); end
end
