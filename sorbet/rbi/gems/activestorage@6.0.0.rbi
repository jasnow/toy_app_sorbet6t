# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module ActiveStorage
  extend(::ActiveSupport::Autoload)

  def analyzers; end
  def analyzers=(obj); end
  def binary_content_type; end
  def binary_content_type=(obj); end
  def content_types_allowed_inline; end
  def content_types_allowed_inline=(obj); end
  def content_types_to_serve_as_binary; end
  def content_types_to_serve_as_binary=(obj); end
  def logger; end
  def logger=(obj); end
  def paths; end
  def paths=(obj); end
  def previewers; end
  def previewers=(obj); end
  def queues; end
  def queues=(obj); end
  def replace_on_assign_to_many; end
  def replace_on_assign_to_many=(obj); end
  def routes_prefix; end
  def routes_prefix=(obj); end
  def service_urls_expire_in; end
  def service_urls_expire_in=(obj); end
  def variable_content_types; end
  def variable_content_types=(obj); end
  def variant_processor; end
  def variant_processor=(obj); end
  def verifier; end
  def verifier=(obj); end

  def self.analyzers; end
  def self.analyzers=(obj); end
  def self.binary_content_type; end
  def self.binary_content_type=(obj); end
  def self.content_types_allowed_inline; end
  def self.content_types_allowed_inline=(obj); end
  def self.content_types_to_serve_as_binary; end
  def self.content_types_to_serve_as_binary=(obj); end
  def self.gem_version; end
  def self.logger; end
  def self.logger=(obj); end
  def self.paths; end
  def self.paths=(obj); end
  def self.previewers; end
  def self.previewers=(obj); end
  def self.queues; end
  def self.queues=(obj); end
  def self.railtie_helpers_paths; end
  def self.railtie_namespace; end
  def self.railtie_routes_url_helpers(include_path_helpers = _); end
  def self.replace_on_assign_to_many; end
  def self.replace_on_assign_to_many=(obj); end
  def self.routes_prefix; end
  def self.routes_prefix=(obj); end
  def self.service_urls_expire_in; end
  def self.service_urls_expire_in=(obj); end
  def self.table_name_prefix; end
  def self.use_relative_model_naming?; end
  def self.variable_content_types; end
  def self.variable_content_types=(obj); end
  def self.variant_processor; end
  def self.variant_processor=(obj); end
  def self.verifier; end
  def self.verifier=(obj); end
  def self.version; end
end

class ActiveStorage::AnalyzeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  def self.queue_name; end
  def self.rescue_handlers; end
end

class ActiveStorage::Analyzer
  def initialize(blob); end

  def blob; end
  def metadata; end

  private

  def download_blob_to_tempfile(&block); end
  def logger; end
  def tmpdir; end

  def self.accept?(blob); end
end

class ActiveStorage::Analyzer::ImageAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  private

  def read_image; end
  def rotated_image?(image); end

  def self.accept?(blob); end
end

class ActiveStorage::Analyzer::NullAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  def self.accept?(blob); end
end

class ActiveStorage::Analyzer::VideoAnalyzer < ::ActiveStorage::Analyzer
  def metadata; end

  private

  def angle; end
  def computed_height; end
  def display_aspect_ratio; end
  def display_height_scale; end
  def duration; end
  def encoded_height; end
  def encoded_width; end
  def ffprobe_path; end
  def height; end
  def probe; end
  def probe_from(file); end
  def rotated?; end
  def streams; end
  def tags; end
  def video_stream; end
  def width; end

  def self.accept?(blob); end
end

class ActiveStorage::Attached
  def initialize(name, record); end

  def name; end
  def record; end

  private

  def change; end
end

module ActiveStorage::Attached::Changes
  extend(::ActiveSupport::Autoload)
end

class ActiveStorage::Attached::Changes::CreateMany
  def initialize(name, record, attachables); end

  def attachables; end
  def attachments; end
  def blobs; end
  def name; end
  def record; end
  def save; end
  def upload; end

  private

  def assign_associated_attachments; end
  def build_subchange_from(attachable); end
  def reset_associated_blobs; end
  def subchanges; end
end

class ActiveStorage::Attached::Changes::CreateOne
  def initialize(name, record, attachable); end

  def attachable; end
  def attachment; end
  def blob; end
  def name; end
  def record; end
  def save; end
  def upload; end

  private

  def build_attachment; end
  def find_attachment; end
  def find_or_build_attachment; end
  def find_or_build_blob; end
end

class ActiveStorage::Attached::Changes::CreateOneOfMany < ::ActiveStorage::Attached::Changes::CreateOne

  private

  def find_attachment; end
end

class ActiveStorage::Attached::Changes::DeleteMany
  def initialize(name, record); end

  def attachables; end
  def attachments; end
  def blobs; end
  def name; end
  def record; end
  def save; end
end

class ActiveStorage::Attached::Changes::DeleteOne
  def initialize(name, record); end

  def attachment; end
  def name; end
  def record; end
  def save; end
end

class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  def attach(*attachables); end
  def attached?; end
  def attachments; end
  def blobs; end
  def detach; end
  def method_missing(method, *args, &block); end

  private

  def respond_to_missing?(name, include_private = _); end
end

module ActiveStorage::Attached::Model
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(ClassMethods)

  def attachment_changes; end
  def reload(*_); end
end

module ActiveStorage::Attached::Model::ClassMethods
  def has_many_attached(name, dependent: _); end
  def has_one_attached(name, dependent: _); end
end

class ActiveStorage::Attached::One < ::ActiveStorage::Attached
  def attach(attachable); end
  def attached?; end
  def attachment; end
  def blank?; end
  def detach; end
  def method_missing(method, *args, &block); end
  def purge; end
  def purge_later; end

  private

  def respond_to_missing?(name, include_private = _); end
  def write_attachment(attachment); end
end

class ActiveStorage::Attachment < ::ActiveRecord::Base
  def autosave_associated_records_for_blob(*args); end
  def autosave_associated_records_for_record(*args); end
  def method_missing(method, *args, &block); end
  def purge; end
  def purge_later; end

  private

  def analyze_blob_later; end
  def dependent; end
  def identify_blob; end
  def purge_dependent_blob_later; end
  def respond_to_missing?(name, include_private = _); end

  def self.__callbacks; end
  def self._reflections; end
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
end

class ActiveStorage::BaseController < ::ActionController::Base
  include(::ActiveStorage::SetCurrent)


  private

  def _layout(lookup_context, formats); end

  def self.__callbacks; end
  def self._helpers; end
  def self.middleware_stack; end
end

class ActiveStorage::BaseJob < ::ActiveJob::Base
end

class ActiveStorage::Blob < ::ActiveRecord::Base
  def self._validators; end
  def self.attribute_type_decorations; end
  def self.defined_enums; end
end

module ActiveStorage::Blob::Analyzable
  def analyze; end
  def analyze_later; end
  def analyzed?; end

  private

  def analyzer; end
  def analyzer_class; end
  def extract_metadata_via_analyzer; end
end

module ActiveStorage::Blob::Identifiable
  def identified?; end
  def identify; end

  private

  def download_identifiable_chunk; end
  def identify_content_type; end
  def update_service_metadata; end
end

module ActiveStorage::Blob::Representable
  extend(::ActiveSupport::Concern)

  def preview(transformations); end
  def previewable?; end
  def representable?; end
  def representation(transformations); end
  def variable?; end
  def variant(transformations); end
end

class ActiveStorage::BlobsController < ::ActiveStorage::BaseController
  include(::ActiveStorage::SetBlob)

  def show; end

  private

  def _layout(lookup_context, formats); end

  def self.__callbacks; end
  def self._helpers; end
  def self.middleware_stack; end
end

class ActiveStorage::Current < ::ActiveSupport::CurrentAttributes
  def self.host; end
  def self.host=(attribute); end
end

class ActiveStorage::DirectUploadsController < ::ActiveStorage::BaseController
  def create; end

  private

  def _layout(lookup_context, formats); end
  def blob_args; end
  def direct_upload_json(blob); end

  def self.__callbacks; end
  def self._helpers; end
  def self.middleware_stack; end
end

class ActiveStorage::DiskController < ::ActiveStorage::BaseController
  def show; end
  def update; end

  private

  def _layout(lookup_context, formats); end
  def acceptable_content?(token); end
  def decode_verified_key; end
  def decode_verified_token; end
  def disk_service; end
  def serve_file(path, content_type:, disposition:); end

  def self.__callbacks; end
  def self._helpers; end
  def self.middleware_stack; end
end

class ActiveStorage::Downloader
  def initialize(service); end

  def open(key, checksum:, name: _, tmpdir: _); end
  def service; end

  private

  def download(key, file); end
  def open_tempfile(name, tmpdir = _); end
  def verify_integrity_of(file, checksum:); end
end

class ActiveStorage::Engine < ::Rails::Engine
end

class ActiveStorage::Error < ::StandardError
end

class ActiveStorage::FileNotFoundError < ::ActiveStorage::Error
end

class ActiveStorage::Filename
  include(::Comparable)

  def initialize(filename); end

  def <=>(other); end
  def as_json(*_); end
  def base; end
  def extension; end
  def extension_with_delimiter; end
  def extension_without_delimiter; end
  def sanitized; end
  def to_json; end
  def to_s; end

  def self.wrap(filename); end
end

class ActiveStorage::IntegrityError < ::ActiveStorage::Error
end

class ActiveStorage::InvariableError < ::ActiveStorage::Error
end

class ActiveStorage::Preview
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def image; end
  def processed; end
  def service_url(**options); end
  def variation; end

  private

  def previewer; end
  def previewer_class; end
  def process; end
  def processed?; end
  def variant; end
end

class ActiveStorage::Preview::UnprocessedError < ::StandardError
end

class ActiveStorage::Previewer
  def initialize(blob); end

  def blob; end
  def preview; end

  private

  def capture(*argv, to:); end
  def download_blob_to_tempfile(&block); end
  def draw(*argv); end
  def instrument(operation, payload = _, &block); end
  def logger; end
  def open_tempfile; end
  def tmpdir; end

  def self.accept?(blob); end
end

class ActiveStorage::Previewer::MuPDFPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_first_page_from(file, &block); end

  def self.accept?(blob); end
  def self.mutool_exists?; end
  def self.mutool_path; end
end

class ActiveStorage::Previewer::PopplerPDFPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_first_page_from(file, &block); end

  def self.accept?(blob); end
  def self.pdftoppm_exists?; end
  def self.pdftoppm_path; end
end

class ActiveStorage::Previewer::VideoPreviewer < ::ActiveStorage::Previewer
  def preview; end

  private

  def draw_relevant_frame_from(file, &block); end
  def ffmpeg_path; end

  def self.accept?(blob); end
end

class ActiveStorage::PurgeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  def self.queue_name; end
  def self.rescue_handlers; end
end

module ActiveStorage::Reflection
end

module ActiveStorage::Reflection::ActiveRecordExtensions
  extend(::ActiveSupport::Concern)

  mixes_in_class_methods(ClassMethods)
end

module ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods
  def reflect_on_all_attachments; end
  def reflect_on_attachment(attachment); end
end

class ActiveStorage::Reflection::HasManyAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  def macro; end
end

class ActiveStorage::Reflection::HasOneAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  def macro; end
end

module ActiveStorage::Reflection::ReflectionExtension
  def add_attachment_reflection(model, name, reflection); end

  private

  def reflection_class_for(macro); end
end

class ActiveStorage::RepresentationsController < ::ActiveStorage::BaseController
  include(::ActiveStorage::SetBlob)

  def show; end

  private

  def _layout(lookup_context, formats); end

  def self.__callbacks; end
  def self._helpers; end
  def self.middleware_stack; end
end

class ActiveStorage::Service
  extend(::ActiveSupport::Autoload)

  def delete(key); end
  def delete_prefixed(prefix); end
  def download(key); end
  def download_chunk(key, range); end
  def exist?(key); end
  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end
  def open(*args, &block); end
  def update_metadata(key, **metadata); end
  def upload(key, io, checksum: _, **options); end
  def url(key, expires_in:, disposition:, filename:, content_type:); end
  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end

  private

  def content_disposition_with(filename:, type: _); end
  def instrument(operation, payload = _, &block); end
  def service_name; end

  def self.build(configurator:, service: _, **service_config); end
  def self.configure(service_name, configurations); end
end

class ActiveStorage::Service::Configurator
  def initialize(configurations); end

  def build(service_name); end
  def configurations; end

  private

  def config_for(name); end
  def resolve(class_name); end

  def self.build(service_name, configurations); end
end

module ActiveStorage::SetBlob
  extend(::ActiveSupport::Concern)


  private

  def set_blob; end
end

module ActiveStorage::SetCurrent
  extend(::ActiveSupport::Concern)
end

module ActiveStorage::Transformers
  extend(::ActiveSupport::Autoload)
end

class ActiveStorage::Transformers::Transformer
  def initialize(transformations); end

  def transform(file, format:); end
  def transformations; end

  private

  def process(file, format:); end
end

class ActiveStorage::UnpreviewableError < ::ActiveStorage::Error
end

class ActiveStorage::UnrepresentableError < ::ActiveStorage::Error
end

module ActiveStorage::VERSION
end

ActiveStorage::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

ActiveStorage::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

ActiveStorage::VERSION::STRING = T.let(T.unsafe(nil), String)

ActiveStorage::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class ActiveStorage::Variant
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def content_type(*args, &block); end
  def filename(*args, &block); end
  def format(*args, &block); end
  def image; end
  def key; end
  def processed; end
  def service(*args, &block); end
  def service_url(expires_in: _, disposition: _); end
  def variation; end

  private

  def process; end
  def processed?; end
  def specification; end
  def transform(image, &block); end
  def upload(file); end
end

class ActiveStorage::Variant::Specification < ::OpenStruct
end

ActiveStorage::Variant::WEB_IMAGE_CONTENT_TYPES = T.let(T.unsafe(nil), Array)

class ActiveStorage::Variation
  def initialize(transformations); end

  def key; end
  def transform(file, format: _, &block); end
  def transformations; end

  private

  def transformer; end

  def self.decode(key); end
  def self.encode(transformations); end
  def self.wrap(variator); end
end

class ActiveStorage::LogSubscriber < ::ActiveSupport::LogSubscriber
  def logger; end
  def service_delete(event); end
  def service_delete_prefixed(event); end
  def service_download(event); end
  def service_exist(event); end
  def service_streaming_download(event); end
  def service_upload(event); end
  def service_url(event); end

  private

  def debug(event, colored_message); end
  def info(event, colored_message); end
  def key_in(event); end
  def log_prefix_for_service(event); end
end
