# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

module ExecJS
  def self.compile(source, options = _); end
  def self.cygwin?; end
  def self.eval(source, options = _); end
  def self.exec(source, options = _); end
  def self.root; end
  def self.runtime; end
  def self.runtime=(runtime); end
  def self.runtimes; end
  def self.windows?; end
end

class ExecJS::DisabledRuntime < ::ExecJS::Runtime
  def available?; end
  def compile(source, options = _); end
  def deprecated?; end
  def eval(source, options = _); end
  def exec(source, options = _); end
  def name; end
end

class ExecJS::DuktapeRuntime < ::ExecJS::Runtime
  def available?; end
  def name; end
end

class ExecJS::DuktapeRuntime::Context < ::ExecJS::Runtime::Context
  def initialize(runtime, source = _, options = _); end

  def call(identifier, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end

  private

  def wrap_error(e); end
end

module ExecJS::Encoding
  def encode(string); end
end

class ExecJS::Error < ::StandardError
end

class ExecJS::ExternalRuntime < ::ExecJS::Runtime
  def initialize(options); end

  def available?; end
  def deprecated?; end
  def exec_runtime(filename); end
  def name; end

  protected

  def encode_source(source); end
  def encode_unicode_codepoints(str); end
  def exec_runtime_error(output); end
  def generate_compile_method(path); end
  def json2_source; end
  def which(command); end

  private

  def binary; end
  def locate_executable(command); end
end

class ExecJS::ExternalRuntime::Context < ::ExecJS::Runtime::Context
  def initialize(runtime, source = _, options = _); end

  def call(identifier, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end

  protected

  def create_tempfile(basename); end
  def extract_result(output, filename); end
  def write_to_tempfile(contents); end
end

class ExecJS::MiniRacerRuntime < ::ExecJS::Runtime
  def available?; end
  def name; end
end

class ExecJS::MiniRacerRuntime::Context < ::ExecJS::Runtime::Context
  def initialize(runtime, source = _, options = _); end

  def call(identifier, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end

  private

  def strip_functions!(value); end
  def translate; end
end

class ExecJS::ProgramError < ::ExecJS::Error
end

class ExecJS::RubyRacerRuntime < ::ExecJS::Runtime
  def available?; end
  def name; end
end

class ExecJS::RubyRacerRuntime::Context < ::ExecJS::Runtime::Context
  def initialize(runtime, source = _, options = _); end

  def call(properties, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end
  def unbox(value); end

  private

  def lock; end
  def wrap_error(e); end
end

class ExecJS::RubyRhinoRuntime < ::ExecJS::Runtime
  def available?; end
  def name; end
end

class ExecJS::RubyRhinoRuntime::Context < ::ExecJS::Runtime::Context
  def initialize(runtime, source = _, options = _); end

  def call(properties, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end
  def unbox(value); end
  def wrap_error(e); end

  private

  def fix_memory_limit!(context); end
end

class ExecJS::Runtime
  def available?; end
  def compile(source, options = _); end
  def context_class; end
  def deprecated?; end
  def eval(source, options = _); end
  def exec(source, options = _); end
  def name; end
end

class ExecJS::Runtime::Context
  include(::ExecJS::Encoding)

  def initialize(runtime, source = _, options = _); end

  def call(properties, *args); end
  def eval(source, options = _); end
  def exec(source, options = _); end
end

class ExecJS::RuntimeError < ::ExecJS::Error
end

class ExecJS::RuntimeUnavailable < ::ExecJS::RuntimeError
end

module ExecJS::Runtimes
  def self.autodetect; end
  def self.best_available; end
  def self.from_environment; end
  def self.names; end
  def self.runtimes; end
end

ExecJS::Runtimes::Disabled = T.let(T.unsafe(nil), ExecJS::DisabledRuntime)

ExecJS::Runtimes::Duktape = T.let(T.unsafe(nil), ExecJS::DuktapeRuntime)

ExecJS::Runtimes::JScript = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::Runtimes::JavaScriptCore = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::Runtimes::MiniRacer = T.let(T.unsafe(nil), ExecJS::MiniRacerRuntime)

ExecJS::Runtimes::Node = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::Runtimes::RubyRacer = T.let(T.unsafe(nil), ExecJS::RubyRacerRuntime)

ExecJS::Runtimes::RubyRhino = T.let(T.unsafe(nil), ExecJS::RubyRhinoRuntime)

ExecJS::Runtimes::SpiderMonkey = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::Runtimes::Spidermonkey = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::Runtimes::V8 = T.let(T.unsafe(nil), ExecJS::ExternalRuntime)

ExecJS::VERSION = T.let(T.unsafe(nil), String)
